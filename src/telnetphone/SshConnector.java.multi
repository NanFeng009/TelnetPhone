package telnetphone;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import com.jcraft.jsch.*;

public class SshConnector {

	public static final int PARAM_TELNET_PORT_DEFAULT = 22;
	private static final String PROMPT = ">";

	public static final int STATE_DISCONNECTED = 0;
	public static final int STATE_CONNECTED = 1;

	private final int back_gap = 100;
	private final int call_gap = 8000;

	private JSch ssh = null;
	private InputStream in = null;
	private OutputStream out = null;

	private int state = STATE_DISCONNECTED;
	private String ip;
	private String userName;
	private String passWord;

	public static void main(String[] args) {
		SshConnector connect = new SshConnector("10.74.39.192", "cisco", "cisco");
		try {
			connect.connect();
		} catch (JSchException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		SshConnector.Thread_speaker t_speaker = connect.new Thread_speaker("speaker", 100, connect);
		SshConnector.Thread_login_out_em t_login_out_em = connect.new Thread_login_out_em("login_out", 100, connect);
		t_speaker.setPriority(Thread.MIN_PRIORITY);
		t_login_out_em.setPriority(Thread.MAX_PRIORITY);
		t_login_out_em.start();
		t_speaker.start();
		try {
			t_speaker.join();
			t_login_out_em.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private void login_out_em() {
		try {
			login_em();
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		try {
			Thread.currentThread().sleep(2000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// make_call();
		// speaker();
		try {
			Thread.currentThread().sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// speaker();
		// end_call();
		try {
			logout_em();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private void speaker() {
		debug("runing speaker()");
		write("phone key " + KeyEvent.SPEAKER);
	}

	private void off_hook() {
		debug("runing off_hook()");
		write("phone key " + KeyEvent.offhook);
	}

	private void on_hook() {
		debug("runing on_hook()");
		write("phone key " + KeyEvent.onhook);
	}

	private void make_call() {
		debug("runing make_call()");
		write("phone key " + KeyEvent.KEYPAD_8);
		write("phone key " + KeyEvent.KEYPAD_8);
		write("phone key " + KeyEvent.KEYPAD_5);
		write("phone key " + KeyEvent.KEYPAD_2);
		write("phone key " + KeyEvent.KEYPAD_5);
		write("phone key " + KeyEvent.KEYPAD_1);
		write("phone key " + KeyEvent.SOFT2);

	}

	private void end_call() {
		debug("runing end_call()");
		write("phone key " + KeyEvent.SOFT2);
	}

	private void login_em() throws InterruptedException {
		debug("runing login_em()");
		write("phone key " + KeyEvent.APPLICATIONS);
		Thread.sleep(1000);
		write("phone key " + KeyEvent.KEYPAD_8);
		Thread.sleep(1000);
		write("phone key " + KeyEvent.KEYPAD_2);
		write("phone key " + KeyEvent.KEYPAD_3);
		write("phone key " + KeyEvent.KEYPAD_4);
		write("phone key " + KeyEvent.KEYPAD_5);
		write("phone key " + KeyEvent.KEYPAD_6);
		write("phone key " + KeyEvent.NAV_DOWN);
		write("phone key " + KeyEvent.KEYPAD_1);
		write("phone key " + KeyEvent.KEYPAD_2);
		write("phone key " + KeyEvent.KEYPAD_3);
		write("phone key " + KeyEvent.KEYPAD_4);
		write("phone key " + KeyEvent.KEYPAD_5);
		write("phone key " + KeyEvent.SOFT2);
	}

	private void logout_em() throws Exception {
		debug("runing logout_em()");
		write("phone key " + KeyEvent.APPLICATIONS);
		Thread.sleep(500);
		write("phone key " + KeyEvent.KEYPAD_8);
		Thread.sleep(800);
		write("phone key " + KeyEvent.SOFT1);
	}

	public SshConnector(String ip, String userName, String passWord) {
		this.ip = ip;
		this.userName = userName;
		this.passWord = passWord;
	}

	public void connect() throws JSchException, IOException {
		// Connect to the specified server
		try {
			JSch jsch = new JSch();

			Session session = jsch.getSession(userName, ip, PARAM_TELNET_PORT_DEFAULT);
			session.setPassword(passWord);

			session.setConfig("StrictHostKeyChecking", "no");

			// connect
			debug("Connecting to server: " + ip + " on port: " + PARAM_TELNET_PORT_DEFAULT);
			session.connect(30000);
			debug("--Connect Ok");

			debug("--Open SSH channel");
			Channel channel = session.openChannel("shell");

			in = channel.getInputStream();
			out = channel.getOutputStream();

			channel.connect();
			debug("--Open SSH channel ok");

			readUntil("(none) login: ");
			write("debug");
			readUntil("Password: ");
			write("debug");

			// Advance to a prompt
			debug("Reading up to prompt.");
			readUntil(PROMPT);
			debug("Prompt found. Ready.");

			state = STATE_CONNECTED;
		} catch (IOException ioe) {
			ioe.printStackTrace();
		}
	}

	public boolean sendCommand(String command, String[] expectResults) {
		try {
			write(command);
			readUntil("\n"); // read past echo
			for (int i = 0; i < expectResults.length; i++) {
				if (expectResults[i] != null) {
					readUntil(expectResults[i]);
				}
			}
			return true;
		} catch (IOException e) {
			return false;
		}
	}

	public String sendCommand(String command, String prompt) {
		try {
			write(command);
			readUntil("\n"); // read past echo
			String result = readUntil(prompt);
			// drop trailing '\n'
			return result.substring(0, result.length() - 1);
		} catch (IOException e) {
			return null;
		}

	}

	/**
	 * Reads input stream until the given pattern is reached. The pattern is
	 * discarded and what was read up until the pattern is returned.
	 */
	protected String readUntil(String pattern) throws IOException {
		char lastChar = pattern.charAt(pattern.length() - 1);
		StringBuilder sb = new StringBuilder();
		int c;

		while ((c = in.read()) != -1) {
			char ch = (char) c;
			System.out.print(ch);
			sb.append(ch);
			if (ch == lastChar) {
				String str = sb.toString();
				if (str.endsWith(pattern)) {
					return str.substring(0, str.length() - pattern.length());
				}
			}
		}
		return null;
	}

	/**
	 * Writes the value to the output stream.
	 */
	protected void write(String value) {
		try {
			out.write((value + "\n").getBytes());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			out.flush();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void debug(String s) {
		System.out.println(s);
	}

	public int getState() {
		return state;
	}

	public String currentTime() {

		Calendar cal = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy.MM.dd 'at' HH:mm:ss z");
		return sdf.format(cal.getTime());

	}

	class Thread_speaker extends Thread {
		private String name;
		private int count;
		private SshConnector connect;

		Thread_speaker(String name, int count, SshConnector connect) {
			this.name = name;
			this.count = count;
			this.connect = connect;
		}

		public void run() {
			while (count > 0) {
				if (count % 2 ==0  || count % 3 ==0)
					Thread.yield();
				connect.debug(name + "is runing" + count + " times");
				connect.speaker();
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				SshConnector.this.speaker();
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				count --;
			}

		}
	}

	class Thread_login_out_em extends Thread {
		private String name;
		private int count;
		private SshConnector connect;

		Thread_login_out_em(String name, int count, SshConnector connect) {
			this.name = name;
			this.count = count;
			this.connect = connect;
		}

		public void run() {
			while (count > 0) {
				connect.debug(name + "is runing " + count + " times");
				connect.login_out_em();
				count --;
			}
		}

	}

}
